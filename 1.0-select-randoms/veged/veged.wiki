== Случайная выборка
Из N элементов выбрать k случайных. Подразумеваем k < N.

=== "Честные" алгоритмы
Под словом "честные" подразумевается, что они выбирают абсолютно случайные элементы,
никак не зависящие друг от друга.

==== "Очевидное"
  1. Берём случайный элемент из N. Это первый элемент результата.
  2. Берём ещё случайный элемент. Добавляем к результату, если его там нет.
  3. Повторяем, пока не наберётся k элементов.

Минус в том, что оно квадратично по k (перебор для выборки случайных
и ещё переборы для проверки вхождения в результат).

==== "Классическое"
  1. Берём случайный элемент r из N. Это первый элемент результата.
  2. В исходном наборе элементов меняем местами r и последний.
  3. Полагаем N = N - 1 и k = k - 1. Задача свелась к исходной.
  4. Повторяем, пока k не станет 0.

Плюс в линейности по k.

Минус в том, что для реализации нужно уметь "дёшево" модифицировать набор исходных элементов,
это не реализуемо на чистых языках (в частности на XSLT).

=== "Нечестные" алгоритмы
Пытаемся придумать алгоритм, линейный по k, и выразимый на XSLT. Допускаем некоторую "нечестность"
(зависимость между элементами), но стараемся делать её как можно более "незаметной".

==== Базовая идея
  1. Делим все N элементов на k "равных" частей (с точностью до кратности).
  2. Из каждой части берём случайный элемент.

Минус в том, что слишком видно, что элементы всегда на примерно равном расстоянии друг от друга,
а некоторые последовательности никогда не могут выпасть.

==== Добавляем случайности
  1. Выбираем случайный элемент r из N (так, чтобы после него помещалось минимум k элементов). Это первый "случайный".
  2. Делим всех следующих после r на k - 1 "ровных" частей (с точностью до кратности). Как в предыдущем варианте.
  3. Выбираем случайный элемент из первой части (в отличае от предыдущего варианта, берём только один). Это второй "случайный".
  4. Повторяем 2-3 уже для второго (и последующих).

Плюс, что элементы стали более "разбросаны". Уже любая последовательность имеет шанс выпасть.

Минус в том, что последниее элементы имеют заметно болеше вероятность выпадения.
Последовательность всегда какбы "сужается".

==== Финальный вариант
  1. Выбираем случайный элемент r из N, так, чтобы после него и до него помещалось минимум k элементов). Это первый "случайный".
  2. Случайным образом выбираем "направление" и в зависимости от него
     повторяем предыдущий алгоритм с элементами до или после первого.

Плюс в том, что теперь "сужение" не так заметно, оно может быть или в начале или в конце.

Минус, по прежнему, в зависимости выбора последующих элементов от предыдущих.

